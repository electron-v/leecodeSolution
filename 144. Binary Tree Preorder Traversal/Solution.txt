144. Binary Tree Preorder Traversal

Given the root of a binary tree, return the preorder traversal of its nodes' values.

 

Example 1:


Input: root = [1,null,2,3]
Output: [1,2,3]
Example 2:

Input: root = []
Output: []
Example 3:

Input: root = [1]
Output: [1]
 

Constraints:

The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100
 

Follow up: Recursive solution is trivial, could you do it iteratively?

Solution :
_______________________________________________________________________________
Java :

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    // List<Integer> res = new ArrayList<>();
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        
        Stack<TreeNode> stack = new Stack<>();
        
        if(root!=null)
            stack.push(root);
        
        while(!stack.isEmpty()){
            
            TreeNode node = stack.pop();
            if(node!=null){
            res.add(node.val);
            stack.push(node.right);
            stack.push(node.left);
            }
            
        }
        
        return res;
        
        // preorder(root);
        // return res;
    }
    
//     public void preorder(TreeNode root){
//         if(root!=null){
//             res.add(root.val);
//             preorder(root.left);
//             preorder(root.right);
//         }
        
//     }
}


_______________________________________________________________________________

Python :
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
#     res = []
#     def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        
#         stack = []
#         res = []
#         index = -1
        
#         if(root !=None):
#             stack.append(root)
#             index += 1
            
#         while(index >= 0):
#             node = stack[index]
#             del(stack[index])
#             index -= 1
#             res.append(node.val)
#             if(node.right != None):
#                 stack.append(node.right)
#                 index += 1
            
#             if(node.left != None):
#                 stack.append(node.left)
#                 index +=1
                
#         return res

    def preorderTraversal(self, root):
        res = []
        stack = [root]
        while stack:
            node = stack.pop()
            if node:
                res.append(node.val)
                stack.append(node.right)
                stack.append(node.left)
        return res
        
    
        
        