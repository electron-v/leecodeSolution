169. Majority Element
Easy

Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2
 

Constraints:

n == nums.length
1 <= n <= 5 * 104
-109 <= nums[i] <= 109
 

Follow-up: Could you solve the problem in linear time and in O(1) space?

Solution :
_______________________________________________________________________________

Python :

class Solution:
    def majorityElement(self, nums: List[int]) -> int:

        cnt = 0
        major = nums[0]
        for x in nums:

            if(cnt == 0):
                cnt += 1
                major = x
            elif(major == x):
                cnt += 1
            else:
                cnt -= 1

        return major

#Optimized
        # return sorted(nums)[len(nums)//2]  

# MySolution
        # cnt = {}
        # lens = len(nums)
        # max = -1
        # cnt[max] = -1
        # for x in nums:
        #     cnt[x] =  cnt.get (x, 0) + 1

        #     if(cnt.get(x) >= cnt.get(max)):
        #         max = x
        # return max



# public class Solution {
#     public int majorityElement(int[] num) {

#         int major=num[0], count = 1;
#         for(int i=1; i<num.length;i++){
#             if(count==0){
#                 count++;
#                 major=num[i];
#             }else if(major==num[i]){
#                 count++;
#             }else count--;
            
#         }
#         return major;
#     }
# }


