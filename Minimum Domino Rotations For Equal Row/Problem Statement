In a row of dominoes, A[i] and B[i] represent the top and bottom halves of the ith domino.  (A domino is a tile with two numbers from 1 to 6 - one on each half of the tile.)

We may rotate the ith domino, so that A[i] and B[i] swap values.

Return the minimum number of rotations so that all the values in A are the same, or all the values in B are the same.

If it cannot be done, return -1

Example1:

Input: A = [2,1,2,4,2,2], B = [5,2,6,2,3,2]
Output: 2
Explanation: 
The first figure represents the dominoes as given by A and B: before we do any rotations.
If we rotate the second and fourth dominoes, we can make every value in the top row equal to 2, as indicated by the second figure.

Example 2:

Input: A = [3,5,1,2,3], B = [3,6,3,3,4]
Output: -1
Explanation: 
In this case, it is not possible to rotate the dominoes to make one row of values equal.


Constraints:

    2 <= A.length == B.length <= 2 * 104
    1 <= A[i], B[i] <= 6


Note :

The main idea behind this problem is we first compare A[0] to whole A array in this we check how many element are present in there other than A[0] i.e how many swap we need to make . the same case only we change array A to B i.e we compare A[0] with array of B and same scenario happen  for  B[0] with array B and B[0] with array A

if(there is some situation where A[i] and B[i] both are not equal to target i.e A[0] or B[0]) then we reuturn  float("inf")

Thank You!